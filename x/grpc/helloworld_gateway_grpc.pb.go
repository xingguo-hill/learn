//生成命令：cd learn/x/grpc/; protoc --go_out=. --go-grpc_out=. --grpc-gateway_out=. helloworld.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: helloworld_gateway.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreeterGW_SayHelloGWJSon_FullMethodName = "/helloworld.GreeterGW/SayHelloGWJSon"
	GreeterGW_SayHelloGWGet_FullMethodName  = "/helloworld.GreeterGW/SayHelloGWGet"
)

// GreeterGWClient is the client API for GreeterGW service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterGWClient interface {
	// 这里定义接口函数
	SayHelloGWJSon(ctx context.Context, in *HelloRequestGW, opts ...grpc.CallOption) (*HelloReplyGW, error)
	SayHelloGWGet(ctx context.Context, in *HelloGetRequestGW, opts ...grpc.CallOption) (*HelloGetReplyGW, error)
}

type greeterGWClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterGWClient(cc grpc.ClientConnInterface) GreeterGWClient {
	return &greeterGWClient{cc}
}

func (c *greeterGWClient) SayHelloGWJSon(ctx context.Context, in *HelloRequestGW, opts ...grpc.CallOption) (*HelloReplyGW, error) {
	out := new(HelloReplyGW)
	err := c.cc.Invoke(ctx, GreeterGW_SayHelloGWJSon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterGWClient) SayHelloGWGet(ctx context.Context, in *HelloGetRequestGW, opts ...grpc.CallOption) (*HelloGetReplyGW, error) {
	out := new(HelloGetReplyGW)
	err := c.cc.Invoke(ctx, GreeterGW_SayHelloGWGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterGWServer is the server API for GreeterGW service.
// All implementations must embed UnimplementedGreeterGWServer
// for forward compatibility
type GreeterGWServer interface {
	// 这里定义接口函数
	SayHelloGWJSon(context.Context, *HelloRequestGW) (*HelloReplyGW, error)
	SayHelloGWGet(context.Context, *HelloGetRequestGW) (*HelloGetReplyGW, error)
	mustEmbedUnimplementedGreeterGWServer()
}

// UnimplementedGreeterGWServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterGWServer struct {
}

func (UnimplementedGreeterGWServer) SayHelloGWJSon(context.Context, *HelloRequestGW) (*HelloReplyGW, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloGWJSon not implemented")
}
func (UnimplementedGreeterGWServer) SayHelloGWGet(context.Context, *HelloGetRequestGW) (*HelloGetReplyGW, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloGWGet not implemented")
}
func (UnimplementedGreeterGWServer) mustEmbedUnimplementedGreeterGWServer() {}

// UnsafeGreeterGWServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterGWServer will
// result in compilation errors.
type UnsafeGreeterGWServer interface {
	mustEmbedUnimplementedGreeterGWServer()
}

func RegisterGreeterGWServer(s grpc.ServiceRegistrar, srv GreeterGWServer) {
	s.RegisterService(&GreeterGW_ServiceDesc, srv)
}

func _GreeterGW_SayHelloGWJSon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequestGW)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterGWServer).SayHelloGWJSon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterGW_SayHelloGWJSon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterGWServer).SayHelloGWJSon(ctx, req.(*HelloRequestGW))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterGW_SayHelloGWGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloGetRequestGW)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterGWServer).SayHelloGWGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterGW_SayHelloGWGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterGWServer).SayHelloGWGet(ctx, req.(*HelloGetRequestGW))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterGW_ServiceDesc is the grpc.ServiceDesc for GreeterGW service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterGW_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.GreeterGW",
	HandlerType: (*GreeterGWServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloGWJSon",
			Handler:    _GreeterGW_SayHelloGWJSon_Handler,
		},
		{
			MethodName: "SayHelloGWGet",
			Handler:    _GreeterGW_SayHelloGWGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld_gateway.proto",
}
