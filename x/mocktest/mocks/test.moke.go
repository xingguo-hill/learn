// Code generated by MockGen. DO NOT EDIT.
// Source: x/mocktest/test.go
//
// Generated by this command:
//
//	mockgen -source=x/mocktest/test.go -package=xtestmock -destination=x/mocktest/mocks/test.moke.go
//
// Package xtestmock is a generated GoMock package.
package xtestmock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMyInterfaceB is a mock of MyInterfaceB interface.
type MockMyInterfaceB struct {
	ctrl     *gomock.Controller
	recorder *MockMyInterfaceBMockRecorder
}

// MockMyInterfaceBMockRecorder is the mock recorder for MockMyInterfaceB.
type MockMyInterfaceBMockRecorder struct {
	mock *MockMyInterfaceB
}

// NewMockMyInterfaceB creates a new mock instance.
func NewMockMyInterfaceB(ctrl *gomock.Controller) *MockMyInterfaceB {
	mock := &MockMyInterfaceB{ctrl: ctrl}
	mock.recorder = &MockMyInterfaceBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyInterfaceB) EXPECT() *MockMyInterfaceBMockRecorder {
	return m.recorder
}

// SomeMethodB mocks base method.
func (m *MockMyInterfaceB) SomeMethodB(append string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SomeMethodB", append)
	ret0, _ := ret[0].(string)
	return ret0
}

// SomeMethodB indicates an expected call of SomeMethodB.
func (mr *MockMyInterfaceBMockRecorder) SomeMethodB(append any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SomeMethodB", reflect.TypeOf((*MockMyInterfaceB)(nil).SomeMethodB), append)
}
